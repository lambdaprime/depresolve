plugins {
    id 'java'
}

apply plugin : 'eclipse'

// Excluding transient dependencies which are not used
configurations {
    implementation {
        exclude(group: 'junit', module: 'junit')
    }
    apiElements {
        exclude(group: 'junit', module: 'junit')
    }
}
 
dependencies {
    implementation 'org.apache.maven:maven-model-builder:3.8.4'
    implementation 'org.apache.maven:maven-resolver-provider:3.8.4'
    implementation 'org.apache.maven.resolver:maven-resolver:1.7.2'
    implementation 'org.apache.maven.resolver:maven-resolver-impl:1.7.2'
    implementation 'org.apache.maven.resolver:maven-resolver-util:1.7.2'
    implementation 'org.apache.maven.resolver:maven-resolver-connector-basic:1.7.2'
    implementation 'org.apache.maven.resolver:maven-resolver-transport-file:1.7.2'
    implementation 'org.apache.maven.resolver:maven-resolver-transport-http:1.7.2'
    implementation 'org.slf4j:slf4j-simple:1.7.32'
    implementation 'io.github.lambdaprime:id.xfunction:14.0'

    // transitively export following dependency to tests project
    apiElements 'org.apache.maven:maven-resolver-provider:3.8.4'
    apiElements 'org.apache.maven.resolver:maven-resolver:1.7.2'
    apiElements 'org.apache.maven.resolver:maven-resolver-impl:1.7.2'
    apiElements 'org.apache.maven.resolver:maven-resolver-util:1.7.2'
    apiElements 'org.apache.maven.resolver:maven-resolver-connector-basic:1.7.2'
    apiElements 'org.apache.maven.resolver:maven-resolver-transport-file:1.7.2'
    apiElements 'org.apache.maven.resolver:maven-resolver-transport-http:1.7.2'
    apiElements 'org.slf4j:slf4j-simple:1.7.32'
    apiElements 'io.github.lambdaprime:id.xfunction:14.0'
}

sourceCompatibility = '11'
targetCompatibility = '11'

jar {
    manifest { 
        attributes 'Implementation-Version': "${rootProject.version}",
                   'Main-Class': 'id.depresolve.app.Main'
    }
}

def packageDir = "$buildDir/package/${projectName}"

task createRelease(type: Zip) {
    archiveFileName = "$releaseFileName"
    destinationDirectory = file("$projectDir/release")
    from file("$packageDir/..")
}

task copyLibs(type: Copy) {
    from configurations.runtimeClasspath
    from jar.archiveFile
    into "${packageDir}/libs"
}

task copyReadme(type: Copy) {
    from("${project.rootDir}/README.md")
    into("$projectDir/src/main/resources")
}

task createPackage(type: Copy, dependsOn: copyLibs) {
    from "${project.rootDir}/README.md"
    from "${project.rootDir}/LICENSE-2.0.txt"
    from file("$projectDir/src/depresolve")
    from file("$projectDir/src/depresolve.bat")
    into packageDir
}

task cleanRelease(type: Delete) {
    delete "$packageDir"
    delete "$projectDir/release"
}

compileJava.dependsOn copyReadme
createRelease.dependsOn createPackage
assemble.dependsOn createRelease
clean.dependsOn cleanRelease
